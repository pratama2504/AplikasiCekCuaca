
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author USER
 */
public class CekCuacaFrame extends javax.swing.JFrame {

    /**
     * Creates new form CekCuacaFrame
     */
    public CekCuacaFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelGambar = new javax.swing.JLabel();
        labelNamaCuaca = new javax.swing.JLabel();
        labelSuhuCuaca = new javax.swing.JLabel();
        txtNamaKota = new javax.swing.JTextField();
        cmbKotaFavorit = new javax.swing.JComboBox<>();
        btnCekCuaca = new javax.swing.JButton();
        btnLoadData = new javax.swing.JButton();
        btnSimpanData = new javax.swing.JButton();
        labelKeterangan = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 150));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama kota", "Nama cuaca", "Tambahan", "Suhu"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Aplikasi Cek Cuaca Sederhana"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Nama kota:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Kota favorit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(jLabel2, gridBagConstraints);

        labelGambar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelGambar.setText("gambar");
        labelGambar.setPreferredSize(new java.awt.Dimension(60, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(labelGambar, gridBagConstraints);

        labelNamaCuaca.setText("Nama cuaca...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(labelNamaCuaca, gridBagConstraints);

        labelSuhuCuaca.setText("Suhu cuaca...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(labelSuhuCuaca, gridBagConstraints);

        txtNamaKota.setPreferredSize(new java.awt.Dimension(120, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(txtNamaKota, gridBagConstraints);

        cmbKotaFavorit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Banjar", "Banjarmasin", "Banjarbaru" }));
        cmbKotaFavorit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKotaFavoritActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(cmbKotaFavorit, gridBagConstraints);

        btnCekCuaca.setText("CEK CUACA");
        btnCekCuaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCekCuacaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(btnCekCuaca, gridBagConstraints);

        btnLoadData.setText("LOAD");
        btnLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(btnLoadData, gridBagConstraints);

        btnSimpanData.setText("SIMPAN");
        btnSimpanData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(btnSimpanData, gridBagConstraints);

        labelKeterangan.setText("Keterangan tambahan...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel1.add(labelKeterangan, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCekCuacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCekCuacaActionPerformed
        cekCuaca();
    }//GEN-LAST:event_btnCekCuacaActionPerformed

    private void cmbKotaFavoritActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKotaFavoritActionPerformed
        txtNamaKota.setText((String) cmbKotaFavorit.getSelectedItem());
    }//GEN-LAST:event_cmbKotaFavoritActionPerformed

    private void btnSimpanDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanDataActionPerformed
        simpanDataKeCSV();
    }//GEN-LAST:event_btnSimpanDataActionPerformed

    private void btnLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataActionPerformed
        muatDataDariCSV();
    }//GEN-LAST:event_btnLoadDataActionPerformed

    private void muatDataDariCSV() {
        // Membuka JFileChooser untuk memilih file CSV
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File CSV untuk Memuat Data");

        // Menampilkan dialog untuk memilih file
        int userSelection = fileChooser.showOpenDialog(this);

        // Jika pengguna memilih file
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();

            // Membaca file CSV
            try (BufferedReader reader = new BufferedReader(new FileReader(fileToOpen))) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Menghapus baris yang sudah ada dalam tabel

                String line;
                boolean isHeader = true;

                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");

                    // Jika ini adalah baris header, skip
                    if (isHeader) {
                        isHeader = false;
                        continue; // Melewati header CSV
                    }

                    // Menambahkan data ke dalam tabel
                    model.addRow(data);
                }

                // Menampilkan pesan sukses
                JOptionPane.showMessageDialog(this, "Data berhasil dimuat dari file: " + fileToOpen.getAbsolutePath());

            } catch (IOException e) {
                // Menangani kesalahan jika terjadi error saat membaca file
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memuat data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void cekCuaca() {
        // Reset label sebelum memulai proses baru
        labelNamaCuaca.setText("Memuat...");
        labelSuhuCuaca.setText("Memuat...");
        labelKeterangan.setText("");
        labelGambar.setIcon(null);
        labelGambar.setText("Memuat...");

        String API_KEY = "e57367f6bf9f06154278b83d65a4a557"; // API Key yang diberikan
        String BASE_URL = "https://api.openweathermap.org/data/2.5/weather";
        String namaKota = txtNamaKota.getText();

        if (namaKota.isEmpty()) {
            showErrorDialog("Nama kota tidak boleh kosong!");
            return;
        }

        try {
            // Tambahkan parameter lang=id untuk bahasa Indonesia
            String endpoint = BASE_URL + "?q=" + namaKota + "&appid=" + API_KEY + "&units=metric&lang=id";
            URL url = new URL(endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");

            if (conn.getResponseCode() == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // Parse dan tampilkan hasil
                parseCuacaData(response.toString());

                // Setelah cuaca berhasil, tambahkan kota ke dalam JTable jika belum ada
                addCuacaToTable(namaKota, response.toString());

                // Setelah cuaca berhasil, tambahkan kota ke dalam JComboBox jika belum ada
                addKotaToFavorite(namaKota);

            } else {
                showErrorDialog("Gagal mengambil data. Periksa nama kota atau koneksi internet!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            showErrorDialog("Terjadi kesalahan: " + e.getMessage());
        }
    }

    private void addCuacaToTable(String kota, String jsonResponse) {
        // Ambil data dari ComboBox
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // Periksa apakah kota sudah ada di dalam tabel
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(kota)) {
                // Jika kota sudah ada, tidak perlu menambahkan lagi
                return;
            }
        }

        // Ambil data cuaca dari jsonResponse (parsing JSON)
        try {
            JSONObject jsonObject = new JSONObject(jsonResponse);
            // Ambil data cuaca dari response
            String namaCuaca = jsonObject.getJSONArray("weather").getJSONObject(0).getString("main");
            String deskripsi = jsonObject.getJSONArray("weather").getJSONObject(0).getString("description");
            String suhuCuaca = String.valueOf(jsonObject.getJSONObject("main").getDouble("temp"));

            // Menambah data cuaca ke dalam JTable
            model.addRow(new Object[]{kota, namaCuaca, deskripsi, suhuCuaca + " °C"});
        } catch (JSONException e) {
            e.printStackTrace();
            showErrorDialog("Terjadi kesalahan saat memparsing data cuaca.");
        }
    }

    private void simpanDataKeCSV() {
        // Membuka JFileChooser untuk memilih lokasi dan nama file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan Data Cuaca");
        fileChooser.setSelectedFile(new File("data_cuaca.csv")); // Menetapkan nama default file

        // Menampilkan dialog untuk memilih file
        int userSelection = fileChooser.showSaveDialog(this);

        // Jika pengguna memilih untuk menyimpan
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Jika file tidak memiliki ekstensi .csv, tambahkan ekstensi .csv
            if (!fileToSave.getAbsolutePath().endsWith(".csv")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".csv");
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                // Menulis header CSV (kolom tabel)
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                int columnCount = model.getColumnCount();
                for (int i = 0; i < columnCount; i++) {
                    writer.write(model.getColumnName(i)); // Menulis nama kolom
                    if (i < columnCount - 1) {
                        writer.write(",");
                    }
                }
                writer.newLine(); // Pindah baris setelah header

                // Menulis data dari tabel
                int rowCount = model.getRowCount();
                for (int i = 0; i < rowCount; i++) {
                    for (int j = 0; j < columnCount; j++) {
                        writer.write(model.getValueAt(i, j).toString()); // Menulis nilai dari setiap sel
                        if (j < columnCount - 1) {
                            writer.write(",");
                        }
                    }
                    writer.newLine(); // Pindah baris setelah satu baris data
                }

                // Menampilkan pesan sukses
                JOptionPane.showMessageDialog(this, "Data berhasil disimpan ke: " + fileToSave.getAbsolutePath());
            } catch (IOException e) {
                // Menangani kesalahan jika terjadi error saat menulis file
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void addKotaToFavorite(String kota) {
        // Ambil data dari ComboBox
        DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cmbKotaFavorit.getModel();

        // Periksa apakah kota sudah ada di dalam ComboBox
        if (model.getIndexOf(kota) == -1) {
            // Jika kota belum ada, tambahkan kota ke dalam ComboBox
            model.addElement(kota);
        }
    }

    private void parseCuacaData(String response) {
        try {
            JSONObject jsonObj = new JSONObject(response);

            // Ambil data cuaca dari response
            String namaCuaca = jsonObj.getJSONArray("weather").getJSONObject(0).getString("main");
            String deskripsi = jsonObj.getJSONArray("weather").getJSONObject(0).getString("description");
            String ikon = jsonObj.getJSONArray("weather").getJSONObject(0).getString("icon");
            double suhu = jsonObj.getJSONObject("main").getDouble("temp");

            // Menampilkan data di label
            labelNamaCuaca.setText(namaCuaca);
            labelSuhuCuaca.setText("Suhu: " + suhu + "°C");
            labelKeterangan.setText("Keterangan: " + deskripsi); // Tambahkan keterangan ke label tambahan

            // Menampilkan ikon cuaca
            String imageUrl = "https://openweathermap.org/img/wn/" + ikon + "@2x.png";
            setGambarCuaca(imageUrl);
        } catch (Exception e) {
            e.printStackTrace();
            showErrorDialog("Kesalahan parsing data: " + e.getMessage());
        }
    }

    private void setGambarCuaca(String imageUrl) {
        try {
            // Bersihkan ikon dan teks sebelum menampilkan yang baru
            labelGambar.setIcon(null);
            labelGambar.setText("Memuat...");

            // Muat gambar dari URL
            URL url = new URL(imageUrl);
            ImageIcon icon = new ImageIcon(url);

            // Sesuaikan ukuran gambar dengan ukuran label
            Image image = icon.getImage();
            Image scaledImage = image.getScaledInstance(labelGambar.getWidth(), labelGambar.getHeight(), Image.SCALE_SMOOTH);

            // Buat ImageIcon baru dengan gambar yang sudah diubah ukurannya
            ImageIcon scaledIcon = new ImageIcon(scaledImage);

            // Tampilkan ikon yang sudah diubah ukurannya
            labelGambar.setIcon(scaledIcon);
            labelGambar.setText(null);  // Hapus teks status
        } catch (Exception e) {
            e.printStackTrace();
            labelGambar.setIcon(null);
            labelGambar.setText("Gambar tidak tersedia.");
            showErrorDialog("Gagal memuat gambar: " + e.getMessage());
        }
    }

    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CekCuacaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CekCuacaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CekCuacaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CekCuacaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CekCuacaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCekCuaca;
    private javax.swing.JButton btnLoadData;
    private javax.swing.JButton btnSimpanData;
    private javax.swing.JComboBox<String> cmbKotaFavorit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelGambar;
    private javax.swing.JLabel labelKeterangan;
    private javax.swing.JLabel labelNamaCuaca;
    private javax.swing.JLabel labelSuhuCuaca;
    private javax.swing.JTextField txtNamaKota;
    // End of variables declaration//GEN-END:variables
}
